esphome:
  name: "daikin-air-sensor"
  project:
    name: "DAIKIN.BRY88AA151K"
    version: "PM2005"
  name_add_mac_suffix: true
  includes:
    - "cm1106.h"
    - "pm2005.h"

esp32:
  board: nodemcu-32s

wifi:
  ssid: 'L' #填写自己的WiFi及密码
  password: '1234567890'
  ap:
    ssid: "DAIKIN Fallback Hotspot"

captive_portal:

api:

ota:

web_server:
  port: 80

logger:

# bluetooth_proxy:  #需要蓝牙代理功能可以打开
#   active: true

# esp32_ble_tracker:

uart:
- id: cm1106_uart
  rx_pin: 16
  tx_pin: 17
  baud_rate: 9600

i2c:
- id: pm25_bus
  sda: 23
  scl: 22
  scan: true

sensor:
- platform: custom
  lambda: |-
    auto cm1106Sensor = new CM1106Sensor(id(cm1106_uart), 10000);
    App.register_component(cm1106Sensor);
    return {cm1106Sensor};
  sensors:
  - name: "DAIKIN CO2 Sensor"
    id: co2sensor
    device_class: carbon_dioxide
    unit_of_measurement: "ppm"
- platform: custom
  lambda: |-
    auto pm25 = new pm2005();
    App.register_component(pm25);
    return {pm25};
  sensors:
  - name: "DAIKIN PM2.5 Sensor "
    id: pm25sensor
    device_class: pm25
    unit_of_measurement: μg/m³
- platform: adc
  pin: 34
  attenuation: auto
  name: "DAIKIN TVOC Sensor"
  id: tvocsensor
  device_class: volatile_organic_compounds
  unit_of_measurement: μg/m³
  accuracy_decimals: 0
  update_interval: 10s
  filters:
    - median:
        window_size: 3
        send_every: 3
        send_first_at: 3
    - lambda: |-
        static float min_value = x;
        if (x < min_value) {
          min_value = x;
        }
        float diff = x - min_value;
        return diff * 4000 + 1;
- platform: hdc1080
  update_interval: 10s
  temperature:
    name: "DAIKIN Temperature Sensor"
    filters:
      - offset: -1
  humidity:
    name: "DAIKIN Humidity Sensor"
- platform: wifi_signal
  name: "DAIKIN Signal"

switch:
- platform: template
  name: "DAIKIN Sleep Mode"
  icon: mdi:sleep
  id: sleepmode
  optimistic: true
- platform: custom
  lambda: |-
    auto cm1106Calib = new CM1106CalibrateSwitch(id(cm1106_uart));
    App.register_component(cm1106Calib);
    return {cm1106Calib};
  switches:
    id: calibration
    internal: true
- platform: gpio
  pin: 5
  id: co2led
  internal: true
- platform: gpio
  pin: 32
  id: tvocled
  internal: true
- platform: gpio
  pin: 33
  id: pm25led
  internal: true

status_led:
  pin: 25

number:
- platform: template
  name: "DAIKIN Threshold CO2"
  entity_category: "config"
  id: co2threshold
  optimistic: true
  unit_of_measurement: "ppm"
  min_value: 400
  max_value: 5000
  step: 100
  initial_value: 1000
  restore_value: true
- platform: template
  name: "DAIKIN Threshold PM2.5"
  entity_category: "config"
  id: pm25threshold
  optimistic: true
  unit_of_measurement: μg/m³
  min_value: 0
  max_value: 200
  step: 10
  initial_value: 50
  restore_value: true
- platform: template
  name: "DAIKIN Threshold TVOC"
  entity_category: "config"
  id: tvocthreshold
  optimistic: true
  unit_of_measurement: μg/m³
  min_value: 0
  max_value: 10000
  step: 1000
  initial_value: 1000
  restore_value: true

binary_sensor:
- platform: template
  internal: true
  id: tvoclambda
  lambda: |-
    if (id(sleepmode).state == false) {
      if (id(tvocsensor).state > id(tvocthreshold).state) {
        return true;
      } else {
        return false;
    }
    } else {
      return false;
    }
  on_press:
    then:
      - switch.turn_on: tvocled
  on_release:
    then:
      - switch.turn_off: tvocled
- platform: template
  internal: true
  id: co2lambda
  lambda: |-
    if (id(sleepmode).state == false) {
      if (id(co2sensor).state > id(co2threshold).state) {
        return true;
      } else {
        return false;
    }
    } else {
      return false;
    }
  on_press:
    then:
      - switch.turn_on: co2led
  on_release:
    then:
      - switch.turn_off: co2led
- platform: template
  internal: true
  id: pm25lambda
  lambda: |-
    if (id(sleepmode).state == false) {
      if (id(pm25sensor).state > id(pm25threshold).state) {
        return true;
      } else {
        return false;
    }
    } else {
      return false;
    }
  on_press:
    then:
      - switch.turn_on: pm25led
  on_release:
    then:
      - switch.turn_off: pm25led
- platform: template
  internal: true
  id: co2_calibration
  lambda: |-
    if (id(co2sensor).state == 400) {
      return true;
    } else {
      return false;
    }
  filters:
    - delayed_on: 5min #CO2持续400ppm并保持5分钟会自动校准
  on_press:
    then:
      - switch.turn_on: calibration
- platform: gpio
  pin: 19
  id: RESET
  internal: true
  on_press:
    then:
      - button.press: reset

button:
- platform: restart
  name: "DAIKIN Restart"
- platform: factory_reset
  id: reset
  internal: true
- platform: template
  name: "DAIKIN CO2 Calibration" #按下后会将当前环境CO2浓度设置为基准400ppm，按下时请确保放入室外或此时CO2浓度足够低
  entity_category: "config"
  on_press:
    then:
      - switch.turn_on: calibration
